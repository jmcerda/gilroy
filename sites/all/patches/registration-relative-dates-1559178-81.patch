diff --git a/includes/registration.field.inc b/includes/registration.field.inc
index a886df6..7fb72f8 100644
--- a/includes/registration.field.inc
+++ b/includes/registration.field.inc
@@ -18,14 +18,22 @@ function registration_field_info() {
         'default_registration_settings' => array(
           'status' => 0,
           'capacity' => 0,
+          'event' => array(
+            'event_date_field' => NULL,
+          ),
           'scheduling' => array(
+            'scheduling_type' => NULL,
             'open' => NULL,
             'close' => NULL,
+            'open_relative' => NULL,
+            'close_relative' => NULL,
           ),
           'reminder' => array(
             'send_reminder' => 0,
             'reminder_settings' => array(
+              'reminder_type' => NULL,
               'reminder_date' => NULL,
+              'reminder_relative' => NULL,
               'reminder_template' => NULL,
             ),
           ),
@@ -82,6 +90,37 @@ function registration_field_instance_settings_form($field, $instance) {
   unset($settings_form['save']);
   $form['default_registration_settings'] += $settings_form;
 
+  // List all parent entity fields suitable for being base date.
+  $parent_field_options = array(NULL => t("- None -"));
+  if (module_exists('date')) {
+    $parent_entity_fields = field_info_instances($instance['entity_type'], $instance['bundle']);
+    foreach ($parent_entity_fields as $field_name => $field_instance) {
+      $field_info = field_info_field($field_name);
+      if (in_array($field_info['type'], array('date', 'datestamp', 'datetime'))) {
+        $parent_field_options[$field_name] = $field_instance['label'];
+      }
+    }
+
+    $form['default_registration_settings']['event'] = array(
+      '#type' => 'fieldset',
+      '#title' => t('Event Date'),
+      '#collapsible' => TRUE,
+      '#collapsed' => FALSE,
+      '#tree' => TRUE,
+      '#weight' => 0,
+    );
+
+    // Add a date field selection option for field instance forms.
+    $form['default_registration_settings']['event']['event_date_field'] = array(
+      '#type' => "select",
+      '#title' => "Date field to use for relative dates",
+      '#options' => $parent_field_options,
+      '#default_value' => isset($default_settings['event_date_field']) ? $default_settings['event_date_field'] : 0,
+      '#description' => t("If this entity contains a date field, you can select it here so you can use it for automatic calculation of relative dates."),
+      '#weight' => 0,
+    );
+  }
+
   $form['hide_register_tab'] = array(
     '#type' => 'checkbox',
     '#title' => t('Hide Register Tab'),
@@ -347,20 +386,38 @@ function registration_form_field_ui_field_edit_form_validate(&$form, &$form_stat
       form_set_error($base_elem_key . 'settings][from_address', t('From email address is invalid.'));
     }
 
+    // If a relative date is set, make sure we have an event date to work with.
+    if (!empty($default_settings['scheduling']['open_relative']) || !empty($default_settings['scheduling']['close_relative']) || $default_settings['reminder']['reminder_settings']['reminder_relative']) {
+      if (empty($default_settings['event']['event_date_field'])) {
+        form_set_error($base_elem_key . 'event][event_date_field', t('Relative dates require an event date field to be set.'));
+      }
+    }
+
     // Validate open date.
     if (!empty($default_settings['scheduling']['open']) && strtotime($default_settings['scheduling']['open']) === FALSE) {
       form_set_error($base_elem_key . 'scheduling][open', t('Date is invalid.'));
     }
 
+    // Validate relative open date.
+    if (!empty($default_settings['scheduling']['open_relative']) && strtotime($default_settings['scheduling']['open_relative']) === FALSE) {
+      form_set_error($base_elem_key . 'scheduling][open_relative', t('Date is invalid.'));
+    }
+
     // Validate close date.
     if (!empty($default_settings['scheduling']['close']) && strtotime($default_settings['scheduling']['close']) === FALSE) {
       form_set_error($base_elem_key . 'scheduling][close', t('Date is invalid.'));
     }
 
+    // Validate relative close date.
+    if (!empty($default_settings['scheduling']['close_relative']) && strtotime($default_settings['scheduling']['close_relative']) === FALSE) {
+      form_set_error($base_elem_key . 'scheduling][close_relative', t('Date is invalid.'));
+    }
+
     // If sending a reminder, ensure date and template are set.
     if ($default_settings['reminder']['send_reminder']
-      && (empty($default_settings['reminder']['reminder_settings']['reminder_date']) ||
-        empty($default_settings['reminder']['reminder_settings']['reminder_template']))) {
+      && (empty($default_settings['reminder']['reminder_settings']['reminder_template'])
+        || !(!empty($default_settings['reminder']['reminder_settings']['reminder_date'])
+          || !empty($default_settings['reminder']['reminder_settings']['reminder_relative'])))) {
       form_set_error($base_elem_key . 'reminder][send_reminder', t('If sending a reminder, provide a date and template.'));
     }
 
@@ -369,6 +426,12 @@ function registration_form_field_ui_field_edit_form_validate(&$form, &$form_stat
       && strtotime($default_settings['reminder']['reminder_settings']['reminder_date']) === FALSE) {
       form_set_error($base_elem_key . 'reminder][reminder_settings][reminder_date', t('Reminder date is invalid.'));
     }
+
+    // Validate relative reminder date.
+    if (!empty($default_settings['reminder']['reminder_settings']['reminder_relative'])
+      && strtotime($default_settings['reminder']['reminder_settings']['reminder_relative']) === FALSE) {
+      form_set_error($base_elem_key . 'reminder][reminder_settings][reminder_relative', t('Reminder date is invalid.'));
+    }
   }
 }
 
diff --git a/includes/registration.forms.inc b/includes/registration.forms.inc
index 08e93dc..385d6c9 100644
--- a/includes/registration.forms.inc
+++ b/includes/registration.forms.inc
@@ -486,14 +486,47 @@ function registration_registrations_broadcast_form_submit($form, &$form_state) {
  *
  * @param array $form
  * @param array $form_state
- * @param object $entity_type
- * @param object $entity
+ * @param array $settings
+ *   The registration settings for the entity.
+ * @param string $entity_type
+ *   The entity type.
+ * @param integer $entity_id
+ *   The entity ID.
  *
  * @return array $form
  *
  * @see hook_registration_entity_settings()
  */
 function registration_entity_settings_form($form, &$form_state, $settings, $entity_type = NULL, $entity_id = NULL) {
+  // Prepare the event date value we derive from the entity date field. We need
+  // to set it as a value so it can be used inside registration_convert_form_settings().
+  $form['event_date'] = array(
+    '#type' => 'value',
+    '#value' => '',
+  );
+
+  // Retrieve the date field from the field instance's registration settings.
+  if ($entity_type && $entity_id) {
+    // See if there was an event date field on the field instance.
+    $entity = entity_load_single($entity_type, $entity_id);
+    list(, , $entity_bundle) = entity_extract_ids($entity_type, $entity);
+    $registration_instances = registration_get_registration_instances(array(
+      'entity_type' => $entity_type,
+      'bundle' => $entity_bundle,
+    ));
+    foreach ($registration_instances as $instance) {
+      if (isset($instance['settings']['default_registration_settings']['event']['event_date_field'])) {
+        $date_field_name = $instance['settings']['default_registration_settings']['event']['event_date_field'];
+        $form['event_date']['#value'] = registration_get_base_entity_date($entity_type, $entity, $date_field_name);
+      }
+    }
+  }
+
+  // Convert the values we stored in the settings back to normal values.
+  foreach ($settings['settings'] as $key => $value) {
+    $settings[$key] = $value;
+  }
+
   if ($entity_id) {
     // We'll need this info when we submit the form:
     $form_state['entity'] = array(
@@ -506,12 +539,22 @@ function registration_entity_settings_form($form, &$form_state, $settings, $enti
   if (module_exists('date_popup')) {
     $date_popup_installed = TRUE;
   }
+
+  // If there is no date field and we are not editing the field instance, unset
+  // the relative date option.
+  $relative_date_disabled = FALSE;
+  if (empty($form['event_date']['#value']) && (!empty($entity_type) && !empty($entity_id))) {
+    $relative_date_disabled = TRUE;
+  }
+
   $form['status'] = array(
     '#type' => 'checkbox',
     '#title' => t('Enable'),
     '#description' => t('Check to enable registrations.'),
     '#default_value' => isset($settings['status']) ? $settings['status'] : -1,
+    '#weight' => -1,
   );
+
   $form['capacity'] = array(
     '#type' => 'textfield',
     '#title' => t('Capacity'),
@@ -520,6 +563,7 @@ function registration_entity_settings_form($form, &$form_state, $settings, $enti
     '#maxlength' => 10,
     '#required' => TRUE,
     '#default_value' => isset($settings['capacity']) ? $settings['capacity'] : 0,
+    '#weight' => -1,
   );
 
   $form['scheduling'] = array(
@@ -530,6 +574,41 @@ function registration_entity_settings_form($form, &$form_state, $settings, $enti
     '#tree' => TRUE,
   );
 
+  $form['scheduling']['scheduling_type'] = array(
+    '#type' => 'radios',
+    '#title' => t('Date format'),
+    '#default_value' => (isset($settings['scheduling_type']) && empty($relative_date_disabled)) ? $settings['scheduling_type'] : 'absolute',
+    '#options' => array(
+      'absolute' => t('Absolute'),
+      'relative' => t('Relative'),
+    ),
+    '#description' => t('Choose to use a date relative to the event date, or an absolute date.'),
+  );
+  if ($relative_date_disabled) {
+    $form['scheduling']['scheduling_type']['relative'] = array(
+      '#disabled' => TRUE,
+      '#title' => $form['scheduling']['scheduling_type']['#options']['relative'] . ' - ' . t('This option is disabled because there is no date field selected on this registration field.'),
+    );
+  }
+
+  $form['scheduling']['open_relative'] = array(
+    '#type' => 'textfield',
+    '#title' => t('Offset for automatic opening of registrations'),
+    '#description' => t("Uses PHP !relative_date_formats relative to the event date. Examples: !examples. You can omit this field if you don't want registrations to !action automatically", array(
+      '!relative_date_formats' => l(t('relative date formats'), 'http://php.net/manual/en/datetime.formats.relative.php'),
+      '!examples' => "'-1 day', '-2 days 14:00', '-7 weekdays', 'first day of this month'",
+      // Relative date examples can't be translated.
+      '!action' => t('open'),
+    )),
+    '#default_value' => !empty($settings['open_relative']) ? $settings['open_relative'] : '',
+    '#states' => array(
+      'visible' => array('xor',
+        array(':input[name="scheduling[scheduling_type]"]' => array('value' => 'relative')),
+        array(':input[name="instance[settings][default_registration_settings][scheduling][scheduling_type]"]' => array('value' => 'relative')),
+      ),
+    ),
+  );
+
   $form['scheduling']['open'] = array(
     '#type' => 'textfield',
     '#title' => t('Open Date'),
@@ -540,6 +619,12 @@ function registration_entity_settings_form($form, &$form_state, $settings, $enti
       )
     ),
     '#default_value' => !empty($settings['open']) ? $settings['open'] : '',
+    '#states' => array(
+      'visible' => array('xor',
+        array(':input[name="scheduling[scheduling_type]"]' => array('value' => 'absolute')),
+        array(':input[name="instance[settings][default_registration_settings][scheduling][scheduling_type]"]' => array('value' => 'absolute')),
+      ),
+    ),
   );
   if ($date_popup_installed) {
     $form['scheduling']['open']['#type'] = 'date_popup';
@@ -550,6 +635,24 @@ function registration_entity_settings_form($form, &$form_state, $settings, $enti
     unset($form['scheduling']['open']['#maxlength']);
   }
 
+  $form['scheduling']['close_relative'] = array(
+    '#type' => 'textfield',
+    '#title' => t('Offset for automatic closing of registrations'),
+    '#description' => t("Uses PHP !relative_date_formats relative to the event date. Examples: !examples. You can omit this field if you don't want registrations to !action automatically", array(
+      '!relative_date_formats' => l(t('relative date formats'), 'http://php.net/manual/en/datetime.formats.relative.php'),
+      '!examples' => "'-1 day', '-2 days 14:00', '-7 weekdays', 'first day of this month'",
+      // Relative date examples can't be translated.
+      '!action' => t('close'),
+    )),
+    '#default_value' => !empty($settings['close_relative']) ? $settings['close_relative'] : '',
+    '#states' => array(
+      'visible' => array('xor',
+        array(':input[name="scheduling[scheduling_type]"]' => array('value' => 'relative')),
+        array(':input[name="instance[settings][default_registration_settings][scheduling][scheduling_type]"]' => array('value' => 'relative')),
+      ),
+    ),
+  );
+
   $form['scheduling']['close'] = array(
     '#type' => 'textfield',
     '#title' => t('Close Date'),
@@ -560,11 +663,17 @@ function registration_entity_settings_form($form, &$form_state, $settings, $enti
       )
     ),
     '#default_value' => !empty($settings['close']) ? $settings['close'] : '',
+    '#states' => array(
+      'visible' => array('xor',
+        array(':input[name="scheduling[scheduling_type]"]' => array('value' => 'absolute')),
+        array(':input[name="instance[settings][default_registration_settings][scheduling][scheduling_type]"]' => array('value' => 'absolute')),
+      ),
+    ),
   );
   if ($date_popup_installed) {
     $form['scheduling']['close']['#type'] = 'date_popup';
     $form['scheduling']['close']['#date_format'] = 'Y-m-d H:i:s O';
-    $form['scheduling']['close']['#description'] = t('When to automatically close registrations.. (This uses the !timezone.)', array(
+    $form['scheduling']['close']['#description'] = t('When to automatically close registrations. (This uses the !timezone.)', array(
       '!timezone' => l(t('site default time zone'), 'admin/config/regional/settings'),
       ));
     unset($form['scheduling']['close']['#maxlength']);
@@ -590,8 +699,44 @@ function registration_entity_settings_form($form, &$form_state, $settings, $enti
     '#title' => t('Settings'),
     '#collapsible' => FALSE,
     '#states' => array(
-      'visible' => array(
-        ':input[name="send_reminder"]' => array('checked' => TRUE),
+      'visible' => array('xor',
+        array(':input[name="reminder[send_reminder]"]' => array('checked' => TRUE)),
+        array(':input[name="instance[settings][default_registration_settings][reminder][send_reminder]"]' => array('checked' => TRUE)),
+      ),
+    ),
+  );
+
+  $form['reminder']['reminder_settings']['reminder_type'] = array(
+    '#type' => 'radios',
+    '#title' => t('Date format'),
+    '#default_value' => (isset($settings['reminder_type']) && empty($relative_date_disabled)) ? $settings['reminder_type'] : 'absolute',
+    '#options' => array(
+      'absolute' => t('Absolute'),
+      'relative' => t('Relative'),
+    ),
+    '#description' => t('Choose to use a date relative to the event date, or an absolute date.'),
+  );
+  if ($relative_date_disabled) {
+    $form['reminder']['reminder_settings']['reminder_type']['relative'] = array(
+      '#disabled' => TRUE,
+      '#title' => $form['reminder']['reminder_settings']['reminder_type']['#options']['relative'] . ' - ' . t('This option is disabled because there is no date field selected on this registration field.'),
+    );
+  }
+
+  $form['reminder']['reminder_settings']['reminder_relative'] = array(
+    '#type' => 'textfield',
+    '#title' => t('Offset for automatic sending of reminders'),
+    '#description' => t("Uses PHP !relative_date_formats relative to the event date. Examples: !examples. You can omit this field if you don't want registrations to !action automatically", array(
+      '!relative_date_formats' => l(t('relative date formats'), 'http://php.net/manual/en/datetime.formats.relative.php'),
+      '!examples' => "'-1 day', '-2 days 14:00', '-7 weekdays', 'first day of this month'",
+      // Relative date examples can't be translated.
+      '!action' => t('remind'),
+    )),
+    '#default_value' => !empty($settings['reminder_relative']) ? $settings['reminder_relative'] : '',
+    '#states' => array(
+      'visible' => array('xor',
+        array(':input[name="reminder[reminder_settings][reminder_type]"]' => array('value' => 'relative')),
+        array(':input[name="instance[settings][default_registration_settings][reminder][reminder_settings][reminder_type]"]' => array('value' => 'relative')),
       ),
     ),
   );
@@ -606,6 +751,12 @@ function registration_entity_settings_form($form, &$form_state, $settings, $enti
       )
     ),
     '#default_value' => !empty($settings['reminder_date']) ? $settings['reminder_date'] : '',
+    '#states' => array(
+      'visible' => array('xor',
+        array(':input[name="reminder[reminder_settings][reminder_type]"]' => array('value' => 'absolute')),
+        array(':input[name="instance[settings][default_registration_settings][reminder][reminder_settings][reminder_type]"]' => array('value' => 'absolute')),
+      ),
+    ),
   );
   if ($date_popup_installed) {
     $form['reminder']['reminder_settings']['reminder_date']['#type'] = 'date_popup';
@@ -731,17 +882,27 @@ function registration_entity_settings_form_validate($form, &$form_state) {
     form_set_error('scheduling][open', t('Date is invalid.'));
   }
 
+  // Validate relative open date.
+  if (!empty($form_state['values']['scheduling']['open_relative']) && strtotime($form_state['values']['scheduling']['open_relative']) === FALSE) {
+    form_set_error('scheduling][open_relative', t('Date is invalid.'));
+  }
+
   // Validate close date:
   if (!empty($form_state['values']['scheduling']['close']) && is_string($form_state['values']['scheduling']['close']) && strtotime($form_state['values']['scheduling']['close']) === FALSE) {
     form_set_error('scheduling][close', t('Date is invalid.'));
   }
 
+  // Validate relative close date.
+  if (!empty($form_state['values']['scheduling']['close_relative']) && strtotime($form_state['values']['scheduling']['close_relative']) === FALSE) {
+    form_set_error('scheduling][close_relative', t('Date is invalid.'));
+  }
+
   // If sending a reminder, ensure date and template are set.
   $reminder = $form_state['values']['reminder'];
   if ($reminder['send_reminder']
-    && (empty($reminder['reminder_settings']['reminder_date']) ||
-      empty($reminder['reminder_settings']['reminder_template']))
-  ) {
+    && (empty($reminder['reminder_settings']['reminder_template'])
+      || !(!empty($reminder['reminder_settings']['reminder_date'])
+        || !empty($reminder['reminder_settings']['reminder_relative'])))) {
     form_set_error('reminder][send_reminder', t('If sending a reminder, provide a date and template.'));
   }
 
@@ -753,21 +914,51 @@ function registration_entity_settings_form_validate($form, &$form_state) {
     if (!empty($reminder['reminder_settings']['reminder_date'])) {
       form_set_error('reminder][reminder_settings][reminder_date', t('You have provided a reminder date, but not opted to send a reminder. Either check the box to send a reminder, or do not provide a reminder date.'));
     }
+    if (!empty($reminder['reminder_settings']['reminder_relative'])) {
+      form_set_error('reminder][reminder_settings][reminder_relative', t('You have provided a reminder date, but not opted to send a reminder. Either check the box to send a reminder, or do not provide a reminder date.'));
+    }
   }
 
   // Validate reminder date:
-  if (!empty($reminder['reminder_settings']['reminder_date'])
+  if (!empty($reminder['reminder_settings']['reminder_date']) && $reminder['reminder_settings']['reminder_type'] == 'absolute'
     && strtotime($reminder['reminder_settings']['reminder_date']) === FALSE
   ) {
     form_set_error('reminder][reminder_settings][reminder_date', t('Reminder date is invalid.'));
   }
 
+  // Validate relative reminder date.
+  if (!empty($reminder['reminder_settings']['reminder_relative']) && $reminder['reminder_settings']['reminder_type'] == 'relative'
+    && strtotime($reminder['reminder_settings']['reminder_relative']) === FALSE) {
+    form_set_error('reminder][reminder_settings][reminder_relative', t('Reminder date is invalid.'));
+  }
+
   // Ensure reminder date is not in the past when "send_reminder" is TRUE:
-  if ($reminder['send_reminder'] && !empty($reminder['reminder_settings']['reminder_date'])) {
+  if ($reminder['send_reminder'] && !empty($reminder['reminder_settings']['reminder_date']) && $reminder['reminder_settings']['reminder_type'] == 'absolute') {
     if (strtotime($reminder['reminder_settings']['reminder_date']) <= time()) {
       form_set_error('reminder][reminder_settings][reminder_date', t('Reminder must be in the future.'));
     }
   }
+
+  // Ensure relative reminder date is not in the past when "send_reminder" is TRUE:
+  if ($reminder['send_reminder'] && !empty($reminder['reminder_settings']['reminder_relative']) && $reminder['reminder_settings']['reminder_type'] == 'relative') {
+    if (strtotime($reminder['reminder_settings']['reminder_date'], $form_state['values']['event_date']) <= time()) {
+      form_set_error('reminder][reminder_settings][reminder_relative', t('Reminder must be in the future.'));
+    }
+  }
+
+  // Ensure none of the relative dates is set later than the event date.
+  registration_convert_relative_date($relative_open, $form_state['values']['event_date'], $form_state['values']['scheduling']['open_relative']);
+  if (strtotime($relative_open) > $form_state['values']['event_date']) {
+    form_set_error('scheduling][open_relative', t('Date is set later then the event date.'));
+  }
+  registration_convert_relative_date($relative_close, $form_state['values']['event_date'], $form_state['values']['scheduling']['close_relative']);
+  if (strtotime($relative_close) > $form_state['values']['event_date']) {
+    form_set_error('scheduling][close_relative', t('Date is set later then the event date.'));
+  }
+  registration_convert_relative_date($relative_reminder, $form_state['values']['event_date'], $reminder['reminder_settings']['reminder_relative']);
+  if (strtotime($relative_reminder) > $form_state['values']['event_date']) {
+    form_set_error('reminder][reminder_settings][reminder_relative', t('Date is set later then the event date.'));
+  }
 }
 
 /**
@@ -779,7 +970,7 @@ function registration_entity_settings_form_validate($form, &$form_state) {
 function registration_entity_settings_form_submit($form, &$form_state) {
   $entity = $form_state['entity'];
 
-  $fields = registration_convert_form_settings($form_state['values']);
+  $fields = registration_convert_form_settings($form_state['values'], $entity);
 
   registration_update_entity_settings($entity['entity_type'], $entity['entity_id'], $fields);
 
@@ -795,7 +986,14 @@ function registration_entity_settings_form_submit($form, &$form_state) {
  *
  * @return array
  */
-function registration_convert_form_settings($values) {
+function registration_convert_form_settings($values, $entity) {
+  // Add additional settings for relative date processing to settings.
+  $values['settings']['scheduling_type'] = isset($values['scheduling']['scheduling_type']) ? $values['scheduling']['scheduling_type'] : NULL;
+  $values['settings']['open_relative'] = isset($values['scheduling']['open_relative']) ? $values['scheduling']['open_relative'] : NULL;
+  $values['settings']['close_relative'] = isset($values['scheduling']['close_relative']) ? $values['scheduling']['close_relative'] : NULL;
+  $values['settings']['reminder_type'] = isset($values['reminder']['reminder_settings']['reminder_type']) ? $values['reminder']['reminder_settings']['reminder_type'] : NULL;
+  $values['settings']['reminder_relative'] = isset($values['reminder']['reminder_settings']['reminder_relative']) ? $values['reminder']['reminder_settings']['reminder_relative'] : NULL;
+
   $fields = array(
     'status' => $values['status'],
     'capacity' => $values['capacity'],
@@ -808,24 +1006,49 @@ function registration_convert_form_settings($values) {
   );
 
   // Reminder: Reminder Date:
-  if (!empty($values['reminder']['reminder_settings']['reminder_date'])) {
+  if (!empty($values['reminder']['reminder_settings']['reminder_date']) && $values['reminder']['reminder_settings']['reminder_type'] == 'absolute') {
     $fields['reminder_date'] = date('Y-m-d H:i:s', strtotime($values['reminder']['reminder_settings']['reminder_date']));
   }
+  elseif (!empty($values['reminder']['reminder_settings']['reminder_relative']) && $values['reminder']['reminder_settings']['reminder_type'] == 'relative' && !empty($values['event_date'])) {
+    registration_convert_relative_date($fields['reminder_date'], $values['event_date'], $values['reminder']['reminder_settings']['reminder_relative']);
+  }
 
   // Scheduling: open date:
-  if (!empty($values['scheduling']['open'])) {
+  if (!empty($values['scheduling']['open']) && $values['scheduling']['scheduling_type'] == 'absolute') {
     $fields['open'] = date('Y-m-d H:i:s', strtotime($values['scheduling']['open']));
   }
+  elseif (!empty($values['scheduling']['open_relative']) && $values['scheduling']['scheduling_type'] == 'relative' && !empty($values['event_date'])) {
+    registration_convert_relative_date($fields['open'], $values['event_date'], $values['scheduling']['open_relative']);
+  }
 
   // Scheduling: close date:
-  if (!empty($values['scheduling']['close'])) {
+  if (!empty($values['scheduling']['close']) && $values['scheduling']['scheduling_type'] == 'absolute') {
     $fields['close'] = date('Y-m-d H:i:s', strtotime($values['scheduling']['close']));
   }
+  elseif (!empty($values['scheduling']['close_relative']) && $values['scheduling']['scheduling_type'] == 'relative' && !empty($values['event_date'])) {
+    registration_convert_relative_date($fields['close'], $values['event_date'], $values['scheduling']['close_relative']);
+  }
 
   return $fields;
 }
 
 /**
+ * Combines a relative date with the event date into a new date value.
+ *
+ * @param &$field
+ *   Reference to the field that will be converted.
+ * @param string $event_date
+ *   Date of the event (base date for relative calculations).
+ * @param string $relative_date
+ *   Relative date.
+ */
+function registration_convert_relative_date(&$field, $event_date, $relative_date) {
+  if (!empty($relative_date)) {
+    $field = date('Y-m-d H:i:s', strtotime($relative_date, $event_date));
+  }
+}
+
+/**
  * Generates the Registration state editing form.
  */
 function registration_state_form($form, &$form_state, $registration_state, $op = 'edit') {
diff --git a/registration.module b/registration.module
index 4c4c083..4e98d94 100644
--- a/registration.module
+++ b/registration.module
@@ -804,7 +804,10 @@ function registration_event_count($entity_type, $entity_id, $registration_id = N
 function registration_entity_insert($entity, $entity_type) {
   $registration_type = registration_get_entity_registration_type($entity_type, $entity);
   if ($registration_type !== FALSE) {
-    registration_entity_set_default_settings($entity_type, $entity);
+    list($entity_id) = entity_extract_ids($entity_type, $entity);
+    if ($settings = registration_entity_get_default_settings($entity_type, $entity)) {
+      registration_entity_update_relative_dates($entity_type, $entity, $settings);
+    }
   }
 }
 
@@ -820,30 +823,122 @@ function registration_entity_update($entity, $entity_type) {
     if (!$settings) {
       registration_entity_set_default_settings($entity_type, $entity);
     }
+    else {
+      registration_entity_update_relative_dates($entity_type, $entity, $settings);
+    }
+  }
+}
+
+/**
+ * Gets the default registration entity settings.
+ *
+ * @param $entity_type
+ * @param $entity
+ *
+ * @return array|NULL
+ */
+function registration_entity_get_default_settings($entity_type, $entity) {
+  list(, , $bundle) = entity_extract_ids($entity_type, $entity);
+  $registration_instances = registration_get_registration_instances(array(
+    'entity_type' => $entity_type,
+    'bundle' => $bundle
+  ));
+  $settings = NULL;
+  foreach ($registration_instances as $instance) {
+    if (isset($instance['settings']['default_registration_settings'])) {
+      // Stash the settings so that we end up with the last set of default
+      // settings in the odd case that there are multiple.
+      $settings = registration_convert_form_settings($instance['settings']['default_registration_settings'], $entity);
+      $settings['settings'] = unserialize($settings['settings']);
+    }
   }
+  return $settings;
 }
+ 
 
 /**
- * Sets the the registration entity settings to the deafults.
+ * Sets the the registration entity settings to the defaults.
  *
  * @param $entity_type
  * @param $entity
  */
 function registration_entity_set_default_settings($entity_type, $entity) {
+  list($entity_id) = entity_extract_ids($entity_type, $entity);
+  if ($settings = registration_entity_get_default_settings($entity_type, $entity)) {
+    registration_entity_update_relative_dates($entity_type, $entity, $settings);
+  }
+}
+
+/**
+ * Updates the relative dates on the registration entity settings.
+ *
+ * This function is ran after the base entity that holds the registration (eg. a
+ * node) is updated. The purpose of this function is to synchronize all relative
+ * dates when the base entity date (event date) changes.
+ *
+ * @param string $entity_type
+ *   The type of entity.
+ * @param object $entity
+ *   The entity object.
+ */
+function registration_entity_update_relative_dates($entity_type, $entity, $settings) {
   list($entity_id, , $bundle) = entity_extract_ids($entity_type, $entity);
   $registration_instances = registration_get_registration_instances(array(
     'entity_type' => $entity_type,
-    'bundle' => $bundle
+    'bundle' => $bundle,
   ));
   foreach ($registration_instances as $instance) {
     if (isset($instance['settings']['default_registration_settings'])) {
-      $settings = registration_convert_form_settings($instance['settings']['default_registration_settings']);
-      registration_update_entity_settings($entity_type, $entity_id, $settings);
+      // If this registration instance contains a date field.
+      if (!empty($instance['settings']['default_registration_settings']['event']['event_date_field'])) {
+        // Obtain date field value.
+        $date_field_name = $instance['settings']['default_registration_settings']['event']['event_date_field'];
+        $event_date = registration_get_base_entity_date($entity_type, $entity, $date_field_name);
+
+        // Store old settings for comparison later.
+        $old_settings = $settings;
+
+        // Calculate new relative dates.
+        registration_convert_relative_date($settings['open'], $event_date, $settings['settings']['open_relative']);
+        registration_convert_relative_date($settings['close'], $event_date, $settings['settings']['close_relative']);
+        registration_convert_relative_date($settings['reminder_date'], $event_date, $settings['settings']['reminder_relative']);
+
+        // If the date fields were changed, update the registration entity.
+        if ($settings !== $old_settings) {
+          $settings['settings'] = serialize($settings['settings']);
+          registration_update_entity_settings($entity_type, $entity_id, $settings);
+        }
+      }
     }
   }
 }
 
 /**
+ * Gets the base entity date for registrations that have set a date field.
+ *
+ * @param string $entity_type
+ *   The host entity type.
+ * @param object $entity
+ *   The host entity object.
+ * @param string $date_field_name
+ *   The name of the date field on the base entity.
+ *
+ * @return int|null
+ *   A timestamp for the base entity date, or null if the date is not set.
+ */
+function registration_get_base_entity_date($entity_type, $entity, $date_field_name) {
+  $field_items = field_get_items($entity_type, $entity, $date_field_name);
+  if (!empty($field_items[0])) {
+    $offset_date = new DateObject(
+      $field_items[0]['value'],
+      $field_items[0]['timezone_db']
+    );
+    return $offset_date->getTimestamp();
+  }
+  return NULL;
+}
+
+/**
  * Implements hook_entity_delete().
  */
 function registration_entity_delete($entity, $entity_type) {
@@ -1097,6 +1192,9 @@ function registration_send_broadcast($entity_type, $entity_id, $subject, $messag
  *   Array keyed by field names from {registration_entity}
  */
 function registration_update_entity_settings($entity_type, $entity_id, $settings) {
+  if (is_array($settings['settings'])) {
+    $settings['settings'] = serialize($settings['settings']);
+  }
   // Insert or update registration entity settings.
   db_merge('registration_entity')
     ->key(array(
