<?php

/**
 * Implements hook_field_formatter_info().
 */
function term_pages_field_formatter_info() {
  return array(
    'term_pages_term_reference_link' => array(
      'label' => t('Link (to custom path)'), 
      'field types' => array('taxonomy_term_reference'),
      'settings' => array(
        'path' => '',
      ),
    ), 
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function term_pages_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $formatter = $display['type'];
  switch ($formatter) {
    case 'term_pages_term_reference_link':
      return term_pages_formatter_settings_form($field, $instance, $view_mode, $form, $form_state);
  }
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function term_pages_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $formatter = $display['type'];
  switch ($formatter) {
    case 'term_pages_term_reference_link':
      return term_pages_formatter_settings_summary($field, $instance, $view_mode);
  }
}

/**
 * Settings for the term_pages formatter.
 */
function term_pages_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $form = array();
  $form['path'] = array(
    '#title' => t('Path'),
    '#type' => 'textfield',
    '#size' => 40,
    '#field_suffix' => '<em>/&lt;Term ID></em>',
    '#description' => t("Path for taxonomy term page. You may enter e.g. a path to a view.<br>The view should accept a <em>Term ID</em> argument. Leave empty for default."),
    '#default_value' => $settings['path'],
  );
  return $form;
}

/**
 * Settings summary for the term_pages formatter.
 */
function term_pages_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $path = ($settings['path']) ? $settings['path'] : 'taxonomy/term';
  return t('Path: @path<em>/&lt;Term ID></em>', array('@path' => $path));
}

/**
 * Implements hook_field_formatter_view().
 */
function term_pages_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  if (module_exists('i18n_taxonomy')) {
    $language = i18n_language();
  }

  // Terms whose tid is 'autocreate' do not exist
  // yet and $item['taxonomy_term'] is not set. Theme such terms as
  // just their name.
  switch ($display['type']) {
    case 'term_pages_term_reference_link':
      foreach ($items as $delta => $item) {
        if ($item['tid'] == 'autocreate') {
          $element[$delta] = array(
            '#markup' => check_plain($item['name']),
          );
        }
        else {
          $term = $item['taxonomy_term'];
          if ($display['settings']['path']) {
            $uri = array(
              'path' => $display['settings']['path'] .'/'. $term->tid, 
              'options' => array(),
            );
          }
          else {
            $uri = entity_uri('taxonomy_term', $term);
          }
          $element[$delta] = array(
            '#type' => 'link', 
            '#title' => (module_exists('i18n_taxonomy')) ? i18n_taxonomy_term_name($term, $language->language) : $term->name,
            '#href' => $uri['path'], 
            '#options' => $uri['options'],
          );
        }
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_field_formatter_prepare_view().
 */
function term_pages_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items, $displays) {
  $tids = array();

  // Collect every possible term attached to any of the fieldable entities.
  foreach ($entities as $id => $entity) {
    foreach ($items[$id] as $delta => $item) {
      // Force the array key to prevent duplicates.
      if ($item['tid'] != 'autocreate') {
        $tids[$item['tid']] = $item['tid'];
      }
    }
  }
  if ($tids) {
    $terms = taxonomy_term_load_multiple($tids);

    // Iterate through the fieldable entities again to attach the loaded term data.
    foreach ($entities as $id => $entity) {
      $rekey = FALSE;

      foreach ($items[$id] as $delta => $item) {
        // Check whether the taxonomy term field instance value could be loaded.
        if (isset($terms[$item['tid']])) {
          // Replace the instance value with the term data.
          $items[$id][$delta]['taxonomy_term'] = $terms[$item['tid']];
        }
        // Terms to be created are not in $terms, but are still legitimate.
        else if ($item['tid'] == 'autocreate') {
          // Leave the item in place.
        }
        // Otherwise, unset the instance value, since the term does not exist.
        else {
          unset($items[$id][$delta]);
          $rekey = TRUE;
        }
      }

      if ($rekey) {
        // Rekey the items array.
        $items[$id] = array_values($items[$id]);
      }
    }
  }
}
